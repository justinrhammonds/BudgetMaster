@model BudgetMaster.Models.CodeFirst.Transaction

@{
    ViewBag.Title = "Edit";
}
@*<div class="container panel panel-default">
    <div class="row panel-heading">
        <div class="col-sm-6"><h4>Create a New Transaction</h4></div>
        <a class="btn btn-success btn-lg col-sm-6 pull-right" href="@Url.Action("Index", "Transactions")">Cancel</a>
    </div>
    <div class="row panel-body">
        @Html.Action("_AccIndexPV", "Accounts")
    </div>
</div>*@



<h2>Edit</h2>

@* THIS FORM WILL SEND POST REQUEST TO UPDATE THE EXISTING RECORD IN THE TRANSACTION MODEL (DB) *@
@using (Html.BeginForm("Edit", "Transactions"))
{
    //Processed on Form Submission. Protects against CSRF attacks!
    // Cross Site Request Forgery (CSRF) is a type of a hack where the hacker exploits the trust of a website
    // on the user. In other words, the site trusts the user(because they have authenticated themselves)
    // and accepts data that turns out to be malicious. This AFToken() ensures that a form being posted 
    // to the server was actually generated by the same server. Thus fake forms that do not have the 
    // AntiForgeryToken from the correct server, gets rejected. For more info, see 
    // http://www.devcurry.com/2013/01/what-is-antiforgerytoken-and-why-do-i.html
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Transaction</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.AccountId)

        <div class="form-group">
            @Html.LabelFor(model => model.PostedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group date">
                    @* On view, Fetches the transaction.PostedDate and displays as value.
                        On submit, updates this transaction.PostedDate in the model (db)*@
                    <input type="text" name="PostedDate" class="form-control input-group" data-provide="datepicker" value='@Model.PostedDate.ToString("M/d/yy")' />
                </div>
                @Html.ValidationMessageFor(model => model.PostedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Amount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* On view, Fetches the transaction.Amount and displays as value. On submit, updates this transaction.Amount in the model (db)*@
                @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Reconciled, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @* On view, Fetches the transaction.Reconciled and displays as value. On submit, updates this transaction.Reconciled in the model (db)*@
                    @Html.EditorFor(model => model.Reconciled)
                    @Html.ValidationMessageFor(model => model.Reconciled, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* On view, Fetches the transaction.Description and displays as value. On submit, updates this transaction.Description in the model (db)*@
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.ActionLink("Need a Different Category?", "Index", "Categories", null, new { @class = "strong" })
            <div class="col-md-10">
                @* On view, Fetches the transaction.CategoryId and displays as value. On submit, updates this transaction.CategoryId in the model (db)*@
                @Html.DropDownList("CategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(model => model.AccountId, "AccountId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @* On view, Fetches the transaction.AccountId and displays as value. On submit, updates this @*transaction.AccountId in the model (db)*@
                @*@Html.DropDownList("AccountId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
            </div>*@
        @*</div>*@

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @* POST REQUEST TO UPDATE THE EXISTING RECORD IN THE TRANSACTION MODEL (DB) *@
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
            $('#sandbox-container input').datepicker({
            format: "m/d/yy",
            maxViewMode: 1,
            todayBtn: "linked"
            })
    </script>;
}
