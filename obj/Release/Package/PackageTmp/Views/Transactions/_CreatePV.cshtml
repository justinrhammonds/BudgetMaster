@model BudgetMaster.Models.CodeFirst.Transaction

@{
    ViewBag.Title = "Create";
}
@* THIS FORM WILL SEND POST REQUEST TO CREATE A NEW RECORD IN THE TRANSACTION MODEL (DB) *@
@using (Html.BeginForm("Create","Transactions"))
{
    //Processed on Form Submission. Protects against CSRF attacks!
    // Cross Site Request Forgery (CSRF) is a type of a hack where the hacker exploits the trust of a website
    // on the user. In other words, the site trusts the user(because they have authenticated themselves)
    // and accepts data that turns out to be malicious. This AFToken() ensures that a form being posted 
    // to the server was actually generated by the same server. Thus fake forms that do not have the 
    // AntiForgeryToken from the correct server, gets rejected. For more info, see 
    // http://www.devcurry.com/2013/01/what-is-antiforgerytoken-and-why-do-i.html
    @Html.AntiForgeryToken()

    <div class="form-inline">
        <h4>Create a New Transaction</h4>
        <hr />
        <div class="row">
            <div class="col-xs-12">@Html.ValidationSummary(true, "", new { @class = "text-danger" })</div>

            <div class="form-group col-sm-6">
                <div>
                    @* On submit, POST to the transaction.Description property in Transaction Model *@
                    @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", placeholder="Enter a short description"} })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-sm-3">
                <div>
                   @* On submit, POST to the transaction.Amount property in Transaction Model *@
                   @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", placeholder="Enter an amount" } })
                    @Html.ValidationMessageFor(model => model.Amount, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group col-sm-3">
                @* On submit, POST to the transaction.PostedDate property in Transaction Model *@
                <div class="input-group date" data-provide="datepicker">
                    @* Fetches current datetime and displays as the default value in this datepicker input *@
                    <input type="text" name="PostedDate" class="form-control datepicker"value='@System.DateTimeOffset.Now.LocalDateTime.ToString("MM/dd/yyyy")' />
                    <div class="input-group-addon"><i class="fa fa-calendar"></i></div>
                </div>
                @Html.ValidationMessageFor(model => model.PostedDate, "", new { @class = "text-danger" })

            </div>
        </div>
        <div class="row">
            <div class="form-group col-sm-4">
                @Html.ActionLink("Need a Different Category?","Index","Categories",null, new { @class="strong" })
                <div>
                    @* On view, DropDownList is populated by _CreatePV PartialViewResult in Transactions controller. On submit, post to transactions.CategoryId property in Transactions Model *@
                    @Html.DropDownList("CategoryId", null,"--Select a Category--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group col-sm-4">
                @if (Model.AccountId == 0)
                {
                    @Html.LabelFor(model => model.AccountId, "AccountId", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div>
                        @* On view, DropDownList is populated by _CreatePV PartialViewResult in Transactions controller. On submit, post to transactions.AccountId property in Transactions Model *@
                        @Html.DropDownList("AccountId", null, "--Select an Account--", htmlAttributes: new { @class = "form-control"@*, @id="_CreateDropDown"*@ })
                        @Html.ValidationMessageFor(model => model.AccountId, "", new { @class = "text-danger" })
                    </div>
                }
                else
                {
                    <input type="hidden" name="AccountId" value="@Model.AccountId" />
                }
            </div>
        </div>

        <div class="row">
            <div class="form-group col-sm-8">
                @Html.LabelFor(model => model.Reconciled, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="checkbox">
                    @* On submit, post to transactions.Reconciled property in Transactions Model *@
                    @Html.EditorFor(model => model.Reconciled)
                    @Html.ValidationMessageFor(model => model.Reconciled, "", new { @class = "text-danger" })
                </div>
            </div>
            @* On submit, POST request sent to CREATE ActionResult in Transactions Controller *@
            <div class="form-group col-sm-4">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $('#date-input').datepicker({
        format: 'mm/dd/yyyy',
        maxViewMode: 1,
        todayBtn: true,
        todayHighlight: true,
        autoclose: true
        })
    </script>;
}
